import streamlit as st
import joblib
import numpy as np
import pandas as pd
from gensim.models import Word2Vec
from sklearn.feature_extraction.text import TfidfVectorizer

# Load c√°c m√¥ h√¨nh ƒë√£ l∆∞u
model_dir = "saved_models"

# Load TF-IDF vectorizer & Logistic Regression model
tfidf_vectorizer = joblib.load(f"{model_dir}/TF-IDF_vectorizer.pkl")
logistic_model = joblib.load(f"{model_dir}/TF-IDF_Logistic Regression.pkl")

# Load Word2Vec Skip-gram & MLP Classifier
w2v_sg = Word2Vec.load(f"{model_dir}/word2vec_skipgram.model")
mlp_model = joblib.load(f"{model_dir}/Word2Vec Skip-gram_MLP Classifier.pkl")

# Mapping nh√£n c·∫£m x√∫c t·ª´ s·ªë ‚Üí ti·∫øng Vi·ªát
sentiment_mapping = {
    0: "üò° Ti√™u c·ª±c",
    1: "üòê Trung l·∫≠p",
    2: "üòä T√≠ch c·ª±c"
}

# H√†m chuy·ªÉn c√¢u th√†nh vector Word2Vec Skip-gram
def sentence_vector(sentence, model):
    words = sentence.split()
    vectors = [model.wv[word] for word in words if word in model.wv]
    return np.mean(vectors, axis=0) if vectors else np.zeros(model.vector_size)

# H√†m d·ª± ƒëo√°n sentiment cho nhi·ªÅu c√¢u
def predict_sentiment(input_texts):
    predictions = []
    
    for text in input_texts:
        # TF-IDF + Logistic Regression
        tfidf_features = tfidf_vectorizer.transform([text])
        tfidf_prediction = logistic_model.predict(tfidf_features)[0]

        # Word2Vec Skip-gram + MLP Classifier
        w2v_features = sentence_vector(text, w2v_sg).reshape(1, -1)
        w2v_prediction = mlp_model.predict(w2v_features)[0]

        predictions.append({
            "C√¢u": text,
            "TF-IDF + Logistic Regression": sentiment_mapping[tfidf_prediction],
            "Word2Vec Skip-gram + MLP": sentiment_mapping[w2v_prediction]
        })
    
    return pd.DataFrame(predictions)  # Tr·∫£ v·ªÅ DataFrame ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n

# ------------------------ Streamlit UI ------------------------
st.title("üîÆ D·ª± ƒëo√°n c·∫£m x√∫c v·ªõi TF-IDF & Word2Vec")

# Input t·ª´ ng∆∞·ªùi d√πng (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu c√¢u)
user_input = st.text_area("Nh·∫≠p c√°c c√¢u c·∫ßn ph√¢n t√≠ch (m·ªói d√≤ng l√† m·ªôt c√¢u):")

if st.button("D·ª± ƒëo√°n"):
    if user_input.strip():
        input_sentences = user_input.split("\n")  # Chia nhi·ªÅu c√¢u theo d√≤ng
        predictions_df = predict_sentiment(input_sentences)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·∫°ng b·∫£ng
        st.subheader("üìä K·∫øt qu·∫£ d·ª± ƒëo√°n:")
        st.dataframe(predictions_df, use_container_width=True)
    else:
        st.warning("‚ö† Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt c√¢u!")
